-- Cria o banco de dados
CREATE DATABASE AcademiaFit;
USE AcademiaFit;
-- Tabela de Alunos
CREATE TABLE alunos (
 id INT AUTO_INCREMENT PRIMARY KEY,
 nome VARCHAR(100) NOT NULL,
 idade INT NOT NULL,
 plano VARCHAR(50) NOT NULL, -- Ex: 'Básico', 'Premium'
 data_inscricao DATE NOT NULL
);
-- Tabela de Instrutores
CREATE TABLE instrutores (
 id INT AUTO_INCREMENT PRIMARY KEY,
 nome VARCHAR(100) NOT NULL,
 especialidade VARCHAR(100) NOT NULL, -- Ex: 'Musculação', 'Yoga'
 data_contratacao DATE NOT NULL
);
-- Tabela de Treinos (relacionada a alunos e instrutores)
CREATE TABLE treinos (
 id INT AUTO_INCREMENT PRIMARY KEY,
 aluno_id INT NOT NULL,
 instrutor_id INT NOT NULL,
 tipo_treino VARCHAR(100) NOT NULL, -- Ex: 'Musculação', 'Cardio'
 data_treino DATE NOT NULL,
 duracao_minutos INT NOT NULL,
 FOREIGN KEY (aluno_id) REFERENCES alunos(id),
 FOREIGN KEY (instrutor_id) REFERENCES instrutores(id)
);
-- Tabela de Aulas em Grupo (relacionada a instrutores)
CREATE TABLE aulas (
 id INT AUTO_INCREMENT PRIMARY KEY,
 instrutor_id INT NOT NULL,
 nome_aula VARCHAR(100) NOT NULL, -- Ex: 'Aula de Zumba', 'Aula de Spinning'
 data_aula DATE NOT NULL,
 capacidade INT NOT NULL,
 FOREIGN KEY (instrutor_id) REFERENCES instrutores(id)
 );

 -- Tabela de Equipamentos
CREATE TABLE equipamentos (
id INT AUTO_INCREMENT PRIMARY KEY,
nome VARCHAR(100) NOT NULL,
quantidade INT NOT NULL,
condicao VARCHAR(50) NOT NULL -- Ex: 'Novo','Usado','Manutenção'
);

-- Inserindo dados de exemplo em alunos
INSERT INTO alunos (nome, idade, plano, data_inscricao) VALUES
('João Silva', 28,'Básico','2023-01-15'),
('Maria Oliveira', 35,'Premium','2023-02-20'),
('Pedro Santos', 22,'Básico','2023-03-10'),
('Ana Costa', 40,'Premium','2023-04-05');

-- Inserindo dados de exemplo em instrutores
INSERT INTO instrutores (nome, especialidade, data_contratacao) VALUES
('Carlos Mendes','Musculação','2022-10-01'),
('Fernanda Lima','Yoga','2022-11-15'),
('Rafael Souza','Cardio','2023-01-20');

-- Inserindo dados de exemplo em treinos
INSERT INTO treinos (aluno_id, instrutor_id, tipo_treino, data_treino, duracao_minutos) VALUES
(1, 1,'Musculação','2023-05-01', 60),
(1, 3,'Cardio','2023-05-03', 45),
(2, 2,'Yoga','2023-05-02', 30),
(3, 1,'Musculação','2023-05-04', 60),
(4, 3,'Cardio','2023-05-05', 45);

-- Inserindo dados de exemplo em aulas
INSERT INTO aulas (instrutor_id, nome_aula, data_aula, capacidade) VALUES
(2,'Aula de Yoga Iniciante','2023-06-10', 20),
(3,'Aula de Spinning','2023-06-12', 15),
(1,'Aula de Musculação Avançada','2023-06-15', 10);

-- Inserindo dados de exemplo em equipamentos
INSERT INTO equipamentos (nome, quantidade, condicao) VALUES
('Halteres', 50,'Novo'),
('Esteira', 10,'Usado'),
('Bicicleta Ergométrica', 8,'Manutenção'),
('Bola de Pilates', 20,'Novo');



-- ----------------------------------------------------------Exercicios em sala -----------------------------------------------------

-- 1 Crie uma procedure chamada AdicionarInstrutor que recebe nomeInstrutor (VARCHAR), 
--   especialidadeInstrutor (VARCHAR) e dataContratacao (DATE). Ela deve inserir um novo instrutor na tabela instrutores
DELIMITER // 
CREATE PROCEDURE AdicionarInstrutor(
IN nomeInstrutor VARCHAR(50),
IN especialidadeInstrutor VARCHAR(50),
IN dataContratacao DATE
)
BEGIN
INSERT INTO instrutores(nome, especialidade, data_contratacao)
VALUES (nomeInstrutor, especialidadeInstrutor, dataContratacao);
END //
DELIMITER ;

CALL AdicionarInstrutor('Marcos Silva','Musculação',CURDATE());

-- 2 Crie uma procedure chamada ListarTreinosPorInstrutor que recebe idInstrutor (INT) e retorna todos os treinos associados a esse instrutor, 
-- incluindo o nome do aluno, tipo de treino, data e duração. Use um JOIN com a tabela alunos.

DELIMITER // 
CREATE PROCEDURE ListarTreinosPorInstrutor(IN idInstrutor INT)
BEGIN
	SELECT i.nome as nome_instrutor, a.nome as nome_aluno, t.tipo_treino, t.data_treino, t.duracao_minutos 
    FROM alunos as a
    JOIN treinos as t 
    ON a.id = t.aluno_id
    JOIN instrutores as i
    ON t.instrutor_id = i.id
    WHERE i.id = idInstrutor;
END //
DELIMITER ;

CALL ListarTreinosPorInstrutor(1);

-- 3 Crie uma procedure chamada AtualizarCondicaoEquipamento que recebe idEquipamento (INT) e novaCondicao (VARCHAR),
-- e atualiza o campo condicao desse equipamento.

DELIMITER // 
CREATE PROCEDURE AtualizarCondicaoEquipamento(IN idEquipamento INT, IN novaCondicao VARCHAR(50))
BEGIN
	UPDATE equipamentos SET condicao = novaCondicao
    WHERE id = idEquipamento;
END //
DELIMITER ;

CALL AtualizarCondicaoEquipamento(1, 'Usado')


-- 4 Crie uma procedure chamada AgendarAula que recebe idInstrutor (INT),
-- nomeAula (VARCHAR), dataAula (DATE) e capacidadeAula (INT). Ela deve inserir uma nova aula na tabela aulas.

DELIMITER // 
CREATE PROCEDURE AgendarAula(IN idInstrutor INT, IN nomeAula VARCHAR(50), dataAula DATE, capacidadeAula INT)
BEGIN
	INSERT INTO aulas(instrutor_id, nome_aula, data_aula, capacidade)
    VALUES (idInstrutor, nomeAula, dataAula, capacidadeAula);
END //
DELIMITER ;

CALL AgendarAula(1, 'Aula Musculação iniciante', CURDATE(), 10)


-- 5 Crie uma procedure chamada RemoverTreino que recebe idTreino (INT) e deleta o treino correspondente da tabela treinos.
-- Adicione uma verificação simples para garantir que o ID exista (usando IF EXISTS, por exemplo).

DELIMITER // 
CREATE PROCEDURE RemoverTreino(IN idTreino INT)
BEGIN
	IF EXISTS (SELECT 1 FROM treinos WHERE id = idTreino) THEN
        DELETE FROM treinos
        WHERE id = idTreino;
    END IF;
END //
DELIMITER ;

CALL RemoverTreino(5)
